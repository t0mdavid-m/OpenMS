// Copyright (c) 2002-2024, The OpenMS Team -- EKU Tuebingen, ETH Zurich, and FU Berlin
// SPDX-License-Identifier: BSD-3-Clause
//
// --------------------------------------------------------------------------
// $Maintainer: Kyowon Jeong$
// $Authors: Kyowon Jeong $
// --------------------------------------------------------------------------

#pragma once

#include <OpenMS/ANALYSIS/TOPDOWN/FLASHDeconvAlgorithm.h>
#include <OpenMS/CHEMISTRY/Residue.h>
#include <OpenMS/CHEMISTRY/ResidueDB.h>
#include <OpenMS/DATASTRUCTURES/DefaultParamHandler.h>
#include <OpenMS/FORMAT/FASTAFile.h>
#include <OpenMS/METADATA/ProteinHit.h>
#include <boost/dynamic_bitset.hpp>
#include <iomanip>
#include <iostream>

namespace OpenMS
{
/**
@brief
@ingroup Topdown
*/

class OPENMS_DLLAPI FLASHTaggerAlgorithm : public DefaultParamHandler, public ProgressLogger
{
public:
  /// constructor
  FLASHTaggerAlgorithm();

  /// destructor
  ~FLASHTaggerAlgorithm() override = default;

  /// copy constructor
  FLASHTaggerAlgorithm(const FLASHTaggerAlgorithm&);

  /// move constructor
  FLASHTaggerAlgorithm(FLASHTaggerAlgorithm&& other) = default;

  /// assignment operator
  FLASHTaggerAlgorithm& operator=(const FLASHTaggerAlgorithm& other);

  /// Find sequence tags from @p mzs and @p intensities then store them in @p tags.
  /**
    @brief
    Decoy or MS level 1 spectra are removed by this process.
    Overlapping PeakGroups in merged spectra are also removed.

    @param deconvolved_spectrum spectrum deconvolved by FLASHDeconv.
    @param ppm The acceptable ppm tolerance for mass

  */
  void run(const DeconvolvedSpectrum& deconvolved_spectrum, double ppm);
  void runMatching(const std::vector<FASTAFile::FASTAEntry>& fasta_entry,
                   const DeconvolvedSpectrum& deconvolved_spectrum,
                   const std::vector<boost::dynamic_bitset<>>& vectorized_fasta_entry,
                   const std::vector<boost::dynamic_bitset<>>& reversed_vectorized_fasta_entry,
                   const std::vector<std::map<int, double>>& mass_map,
                   const std::vector<std::map<int, double>>& rev_mass_map,
                   double max_mod_mass = 0);
  const MSSpectrum& getSpectrum() const;
  void getTags(std::vector<FLASHHelperClasses::Tag>& tags, int tag_length = 0) const;
  static int getPeakGroupScore(const PeakGroup& peak_group);

  static void getMatchedPositionsAndFlankingMassDiffs(std::vector<int>& positions,
                                                      std::vector<double>& masses,
                                                      double flanking_mass_tol,
                                                      const String& seq,
                                                      const FLASHHelperClasses::Tag& tag);
  void getProteinHits(std::vector<ProteinHit>& hits, int max_target_count) const;
  double getDecoyFactor() const
  {
    return decoy_factor_;
  }
  const static int max_peak_group_score = 8;
protected:
  void updateMembers_() override;
  /// implemented for DefaultParamHandler
  void setDefaultParams_();

private:
  /**
   @brief makes three vectors containing monoisotopic mass and score and scan numbers of each peakgroups.
   This function triggers the void run(const DeconvolvedSpectrum& dspec, double ppm) function using
   merged spectrum and ppm

    @param dspec merged spectra generated by previous run method.
    @param ppm The acceptable ppm tolerance for mass.
    @param mode process mode : 0 - process common n c ion shift. 1 - n 2 - c term exclusive ion shift
  */
  void getTags_(const DeconvolvedSpectrum& dspec, double ppm, int mode);
  /**
    @brief makes three vectors containing monoisotopic mass and score and scan numbers of each peakgroups.
    @param mzs mass
    @param scores score of each mass
    @param scan scan number
    @param ppm The acceptable ppm tolerance for mass.
    @param mode process mode : 0 - process common n c ion shift. 1 - n 2 - c term exclusive ion shift
  */
  void getTags_(const std::vector<double>& mzs, const std::vector<int>& scores, int scan, double ppm, int mode);
  void constructDAG_(FLASHHelperClasses::DAG& dag, const std::vector<double>& mzs, const std::vector<int>& scores, int length, double tol, int mode);
  std::vector<Residue> getAA_(double l, double r, double tol, int consider_ion_diff, int mode) const;
  std::vector<std::vector<Residue>> getGap_(double l, double r, double tol, int iso_offset) const;
  void updateEdgeMasses_();
  Size getVertex_(int index, int path_score, int level, int iso_level, int gap_level) const;
  int getIndex_(Size vertex) const;

  void indexFasta_(const std::vector<FASTAFile::FASTAEntry>& fasta_entry);

  void getScoreAndMatchCount_(const std::vector<int>& spec_vec,
                              const boost::dynamic_bitset<>& pro_vec,
                              //const boost::dynamic_bitset<>& mask_pro_vec,
                              const std::set<int>& spec_pro_diffs,
                              const std::vector<int>& spec_scores,
                              int& max_score, int& match_cntr) const;


  void updateTagSet_(std::set<FLASHHelperClasses::Tag>& tag_set,
                     std::map<String, std::vector<FLASHHelperClasses::Tag>>& seq_tag,
                     const std::vector<Size>& path,
                     const std::vector<double>& mzs,
                     const std::vector<int>& scores,
                     int scan,
                     double ppm, int mode);

  static Size find_with_X_(const std::string_view& A, const String& B, Size pos = 0);

  MSSpectrum spec_;
  std::set<const Residue*> aas_ = ResidueDB::getInstance()->getResidues("Natural20");
  std::map<double, std::vector<Residue>> aa_mass_map_;
  std::map<double, std::vector<std::vector<Residue>>> gap_mass_map_;
  std::map<int, std::map<int, std::vector<String>>> edge_aa_map_;

  std::vector<FLASHHelperClasses::Tag> tags_; // from scan to tags
  std::vector<ProteinHit> protein_hits_;

  std::set<double> common_shifts_;
  std::set<double> n_term_shifts_;
  std::set<double> c_term_shifts_;

  std::map<String, std::set<Size>> indexed_fasta_;
  bool consider_diff_ion_jumps_ = false;
  int max_tag_count_ = 0;
  int min_tag_length_ = 0;
  int max_tag_length_ = 0;
  //int max_iso_in_tag_ = 0;
  int max_path_score_ = 0;
  int min_path_score_ = 0;
  int max_gap_count_ = 0;
  int max_aa_in_gap_ = 2;
  int min_cov_aa_ = 3;
  double decoy_factor_ = -1;
  double max_edge_mass_ = 0;
  //double flanking_mass_tol_ = -1;
};
} // namespace OpenMS